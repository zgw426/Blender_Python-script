##---------------------------------------##
##
## シャープ測距モジュール GP2Y0A21YK 2つを
## サーボモータの上に設置する固定台
## 
##---------------------------------------##

import bpy
import bmesh
import random
import math

# 変数
obj = bpy.data.objects
olist = [] # オブジェクトパラメータ群
mlist = [] # マテリアル群
alist = [] # オブジェクト編集

# 1.既存要素削除
for item in bpy.data.meshes:
    bpy.data.meshes.remove(item)

# 2.材質の定義
random.seed(110) # 乱数のシード設定
for i in range(100):
    mlist.append( bpy.data.materials.new('mat{}'.format(i) ) )
    mlist[-1].diffuse_color = (random.random(), random.random(), random.random(), 1.0)

##-------------------------------##
def booleanFnc(obj01 , obj02):
    """ブーリアン"""
    bool01 = obj01.modifiers.new(type="BOOLEAN", name="bool_01")
    bool01.object = obj02
    bool01.operation = 'DIFFERENCE'
    bpy.context.view_layer.objects.active = obj01
    bpy.ops.object.modifier_apply(modifier="bool_01")


def moveFnc(obj01, mX, mY, mZ):
    """オブジェクト移動"""
    bpy.context.view_layer.objects.active = obj01
    obj01.location = ( mX, mY, mZ )


def moveFnc2(obj01, pnt):
    """オブジェクト移動2"""
    bpy.context.view_layer.objects.active = obj01
    obj01.location = pnt


def moveFnc3(obj01, pnt, flg ):
    """オブジェクト移動3 ※ flg=0 -> 現在座標 , flg=1 -> 移動"""
    tgtX = obj01.location[0]
    tgtY = obj01.location[1]
    tgtZ = obj01.location[2]
    
    if flg[0] == 1:
        tgtX = pnt[0]
    if flg[1] == 1:
        tgtY = pnt[1] 
    if flg[2] == 1:
        tgtZ = pnt[2]
    
    pnt = ( tgtX, tgtY, tgtZ )
    
    bpy.context.view_layer.objects.active = obj01
    obj01.location = pnt
    print("#2 {}".format(obj01.location) )
    print("#3 {0} {1} {2}".format(pnt[0],pnt[1],pnt[2]) )


def rotateFnc(obj01, angle):
    """オブジェクト回転"""
    bpy.context.view_layer.objects.active = obj01
    obj01.rotation_euler = angle


def hideFnc(obj01, setVal):
    """オブジェクト非表示"""
    bpy.context.view_layer.objects.active = obj01
    bpy.context.object.hide_set( setVal )


def deleteFnc(obj01):
    """オブジェクト削除"""
    bpy.data.objects.remove(obj01)


def objCube(args):
    """オブジェクト立方体作成"""
    bpy.ops.mesh.primitive_cube_add(location=args["location"], size=1.0 , rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"])  #材質指定
    bpy.ops.transform.resize(value=args["size"]) #図形変形
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def objCylinder(args):
    """オブジェクト円柱作成"""
    bpy.ops.mesh.primitive_cylinder_add(location=args["location"], radius=args["radius"], depth=args["depth"], rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"]) #材質指定
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def objCone(args):
    """円錐"""
    bpy.ops.mesh.primitive_cone_add(location=args["location"],vertices=args["vertices"],radius1=args["radius1"],radius2=args["radius2"],depth=args["depth"], rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"]) #材質指定
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def bevelFnc(objName, segmentsVal, widthVal):
    """ ベベル（角丸め） """
    #bpy.context.view_layer.objects.active = objVal
    bpy.context.view_layer.objects.active = obj[objName]
    context = bpy.context
    ob = context.object
    bm = ob.modifiers.new(name="bevel", type='BEVEL',)
    bm.segments = segmentsVal
    bm.width = widthVal
    bm.custom_profile.update() 


def objCopy(objName, new_name, pnt):
    """オブジェクトの複製"""
    for obj in bpy.data.objects:
        obj.select_set(False)
    original_obj = bpy.data.objects[objName]
    original_obj.select_set(True)
    bpy.ops.object.duplicate_move(TRANSFORM_OT_translate={"value":pnt})
    new_obj = bpy.data.objects[objName + ".001"]
    new_obj.name = new_name


def changeMode():
    print( bpy.context.mode )
    bpy.ops.object.mode_set(mode='EDIT', toggle=False) # 編集モードに移行する
    print( bpy.context.mode )
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    print( bpy.context.mode )


def moveMesh(objName, faceNo,pnt):
    """面の押し出し"""
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    bpy.context.view_layer.objects.active = obj[objName]
    bpy.ops.object.mode_set(mode='EDIT')

    # 全てのメッシュを非選択状態にする.
    bpy.ops.mesh.select_all(action='DESELECT')
    
    # 面モードに設定.
    bpy.ops.mesh.select_mode(type="FACE")
    cube_bmesh = bmesh.from_edit_mesh(bpy.context.object.data)
    cube_bmesh.faces.ensure_lookup_table()
    cube_bmesh.faces[faceNo].select = True
    bpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={"value":pnt} )

    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)


def movePoint(objName, pointNo, pnt):
    '''頂点モードにし, 一つの頂点を動かす'''
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    bpy.context.view_layer.objects.active = obj[objName]
    bpy.ops.object.mode_set(mode='EDIT')

    # 全てのメッシュを非選択状態にする.
    bpy.ops.mesh.select_all(action='DESELECT')
    
    # 頂点モードに設定
    bpy.ops.mesh.select_mode(type="VERT")
    cube_bmesh = bmesh.from_edit_mesh(bpy.context.object.data)
    cube_bmesh.verts.ensure_lookup_table()
    cube_bmesh.verts[pointNo].select = True
    bpy.ops.transform.translate(value=pnt)
    # 標準モードに戻す
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)


def expansionFnc(TARGET, THICKNESS02):
    """ 拡大する """
    global alist
    THICKNESS01 = -1* THICKNESS02
    alist.append({"function": "movePoint", "args": [TARGET, 0, THICKNESS01, THICKNESS01, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 2, THICKNESS01, THICKNESS02, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 4, THICKNESS02, THICKNESS01, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 6, THICKNESS02, THICKNESS02, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 1, THICKNESS01, THICKNESS01, THICKNESS02]})
    alist.append({"function": "movePoint", "args": [TARGET, 3, THICKNESS01, THICKNESS02, THICKNESS02]})
    alist.append({"function": "movePoint", "args": [TARGET, 5, THICKNESS02, THICKNESS01, THICKNESS02]})
    alist.append({"function": "movePoint", "args": [TARGET, 7, THICKNESS02, THICKNESS02, THICKNESS02]})


def creObjFlow(args):
    """オブジェクト作成フロー"""
    # オブジェクトの作成
    for curObj in args:
        match curObj["OBJ"]:
            case "CUBE":
                objCube(curObj)
            case "CYLINDER":
                objCylinder(curObj)
            case "CONE":
                objCone(curObj)
    # オブジェクトの編集
    for curObj in args:
        if "edit" in curObj:
            for act in curObj["edit"]:
                match act[0]:
                    case "moveMesh":
                        moveMesh(curObj["name"], act[1],act[2]) # 面の押し出し
                    case "bevelFnc":
                        bevelFnc(obj[ curObj["name"] ], act[1],act[2]) # 角丸め


def editFlow(args):
    """オブジェクトの編集"""
    for curObj in args:
        match curObj["function"]:
            case "booleanFnc":
                """ ブーリアン """
                booleanFnc(obj[ curObj["args"][0] ],obj[ curObj["args"][1] ]) # 
            case "deleteFnc":
                """ 削除 """
                deleteFnc(obj[ curObj["args"][0] ]) # 
            case "moveFnc2":
                """ 移動(Fnc2) """
                pnt = (curObj["args"][1], curObj["args"][2], curObj["args"][3])
                moveFnc2(obj[ curObj["args"][0] ], pnt ) 
            case "moveFnc3":
                """ 移動(Fnc3) """
                moveFnc3(obj[ curObj["args"][0] ], curObj["args"][1], curObj["args"][2] ) # 
            case "copyFnc":
                """ 複製 """
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                objCopy(curObj["args"][0], curObj["args"][1], pnt)
            case "rotateFnc":
                """ 回転 """
                pnt_x = math.radians(float(curObj["args"][1]))
                pnt_y = math.radians(float(curObj["args"][2]))
                pnt_z = math.radians(float(curObj["args"][3]))
                pnt = (pnt_x, pnt_y, pnt_z)
                rotateFnc(obj[curObj["args"][0]], pnt)
            case "movePoint":
                """ 点の移動 """
                objName = curObj["args"][0]
                pointNo = curObj["args"][1]
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                movePoint(objName, pointNo, pnt)
            case "bevelFnc":
                """ ベベル（角丸め） """
                objName = curObj["args"][0]
                segmentsVal = curObj["args"][1]
                widthVal = curObj["args"][2]
                bevelFnc(objName, segmentsVal, widthVal)
            case "moveMesh":
                """面の押し出し"""
                objName = curObj["args"][0]
                faceNo = curObj["args"][1]
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                moveMesh(objName, faceNo,pnt)


##-------------------------------##

# シャープ測距モジュール GP2Y0A21YKにある左右の穴
olist.append( {"OBJ": "CYLINDER","name": "HOLE01", "location": (18.1, 0, 2.2),"radius": 1.6,"depth": 6.0,"rotation": (1.5708,0,0),"material": mlist[89],} )
olist.append( {"OBJ": "CYLINDER","name": "HOLE02", "location": (-18.1, 0, 2.2),"radius": 1.6,"depth": 6.0,"rotation": (1.5708,0,0),"material": mlist[90],} )

# シャープ測距モジュール GP2Y0A21YKを固定する左右の柱
olist.append( {"OBJ": "CUBE", "name": "SIDE01", "location": ( 18.5, 0, -2.5),   "size": (8, 4, 17.9), "rotation": (0,0,0), "material": mlist[12],} )
olist.append( {"OBJ": "CUBE", "name": "SIDE02", "location": (-18.5, 0, -2.5),   "size": (8, 4, 17.9), "rotation": (0,0,0), "material": mlist[11],} )

# シャープ測距モジュール GP2Y0A21YKを固定する左右の柱に穴をあける
alist.append({"function": "booleanFnc", "args": ["SIDE01","HOLE01"]})
alist.append({"function": "booleanFnc", "args": ["SIDE02","HOLE02"]})


alist.append({"function": "moveFnc2", "args": ["SIDE01", 18.5, 0, -1.2]})
alist.append({"function": "moveFnc2", "args": ["SIDE02",-18.5, 0, -1.2]})


# レゴと互換性のある穴
olist.append( {"OBJ": "CYLINDER","name": "LEGOHOLE", "location": (0,0,0),"radius": 2.60,"depth": 90.0,"rotation": (0,0,0),"material": mlist[89],} )

# サーボモータに乗せる台座部分
olist.append( {"OBJ": "CUBE", "name": "Fixed-Block-01", "location": (0, 0, -13), "size": (45, 30, 6), "rotation": (0,0,0), "material": mlist[20],} )

# サーボモータに乗せる台座部分にサーボモータがハマるように底面に溝を作る
olist.append( {"OBJ": "CUBE", "name": "HC-SR04-Bottom-01", "location": (0, 0, -15), "size": (24.2, 46, 6), "rotation": (0,0,0), "material": mlist[21],} )
alist.append({"function": "booleanFnc", "args": ["Fixed-Block-01","HC-SR04-Bottom-01"]})

# サーボモータに乗せる台座部分にレゴ互換の穴をあける
IniPntX = -8
IniPntY = -16
IniPntZ = -24
CurPntX = 0
CurPntY = 0
CurPntZ = 0

for iX in range(3):
    for iY in range(5):
        for iZ in range(3):
            CurPntX = iX * 8 + IniPntX
            CurPntY = iY * 8 + IniPntY
            CurPntZ = iZ * 8 + IniPntZ        
            alist.append({"function": "moveFnc2", "args": ["LEGOHOLE",CurPntX,CurPntY,CurPntZ]})
            alist.append({"function": "booleanFnc", "args": ["Fixed-Block-01","LEGOHOLE"]})

alist.append({"function": "deleteFnc", "args": ["LEGOHOLE"]})
alist.append({"function": "deleteFnc", "args": ["HOLE01"]})
alist.append({"function": "deleteFnc", "args": ["HOLE02"]})
alist.append({"function": "deleteFnc", "args": ["HC-SR04-Bottom-01"]})

#############################################
# 処理開始
## オブジェクト作成
creObjFlow(olist)
## オブジェクト加工
editFlow(alist)
