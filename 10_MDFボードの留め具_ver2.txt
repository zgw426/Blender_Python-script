##---------------------------------------##
##
## できるだけ簡単に箱を作る留め具を3Dプリンターで作りたい
## フタ付き
## MDF材(100mm x 100mm x 6mm)と3DCGで作った留め具で箱を作りたい
## MDF材にはできるだけ加工しなように工夫した。
## 
## 留め串の軸にはつまようじを使用する
## 
##---------------------------------------##


import bpy
import bmesh
import random
import math

# 変数
obj = bpy.data.objects
olist = [] # オブジェクトパラメータ群
mlist = [] # マテリアル群
alist = [] # オブジェクト編集

# 1.既存要素削除
for item in bpy.data.meshes:
    bpy.data.meshes.remove(item)

# 2.材質の定義
random.seed(110) # 乱数のシード設定
for i in range(100):
    mlist.append( bpy.data.materials.new('mat{}'.format(i) ) )
    mlist[-1].diffuse_color = (random.random(), random.random(), random.random(), 1.0)

##-------------------------------##
def booleanFnc(obj01 , obj02):
    """ブーリアン"""
    bool01 = obj01.modifiers.new(type="BOOLEAN", name="bool_01")
    bool01.object = obj02
    bool01.operation = 'DIFFERENCE'
    bpy.context.view_layer.objects.active = obj01
    bpy.ops.object.modifier_apply(modifier="bool_01")


def moveFnc(obj01, mX, mY, mZ):
    """オブジェクト移動"""
    bpy.context.view_layer.objects.active = obj01
    obj01.location = ( mX, mY, mZ )


def moveFnc2(obj01, pnt):
    """オブジェクト移動2"""
    bpy.context.view_layer.objects.active = obj01
    obj01.location = pnt


def moveFnc3(obj01, pnt, flg ):
    """オブジェクト移動3 ※ flg=0 -> 現在座標 , flg=1 -> 移動"""
    tgtX = obj01.location[0]
    tgtY = obj01.location[1]
    tgtZ = obj01.location[2]
    
    if flg[0] == 1:
        tgtX = pnt[0]
    if flg[1] == 1:
        tgtY = pnt[1] 
    if flg[2] == 1:
        tgtZ = pnt[2]
    
    pnt = ( tgtX, tgtY, tgtZ )
    
    bpy.context.view_layer.objects.active = obj01
    obj01.location = pnt
    print("#2 {}".format(obj01.location) )
    print("#3 {0} {1} {2}".format(pnt[0],pnt[1],pnt[2]) )


def rotateFnc(obj01, angle):
    """オブジェクト回転"""
    bpy.context.view_layer.objects.active = obj01
    obj01.rotation_euler = angle


def hideFnc(obj01, setVal):
    """オブジェクト非表示"""
    bpy.context.view_layer.objects.active = obj01
    bpy.context.object.hide_set( setVal )


def deleteFnc(obj01):
    """オブジェクト削除"""
    bpy.data.objects.remove(obj01)


def objCube(args):
    """オブジェクト立方体作成"""
    bpy.ops.mesh.primitive_cube_add(location=args["location"], size=1.0 , rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"])  #材質指定
    bpy.ops.transform.resize(value=args["size"]) #図形変形
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def objCylinder(args):
    """オブジェクト円柱作成"""
    bpy.ops.mesh.primitive_cylinder_add(location=args["location"], radius=args["radius"], depth=args["depth"], rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"]) #材質指定
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def objHexaCylinder(args):
    """オブジェクト六角柱作成"""
    bpy.ops.mesh.primitive_cylinder_add(vertices = 6, location=args["location"], radius=args["radius"], depth=args["depth"], rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"]) #材質指定
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def objCone(args):
    """円錐"""
    bpy.ops.mesh.primitive_cone_add(location=args["location"],vertices=args["vertices"],radius1=args["radius1"],radius2=args["radius2"],depth=args["depth"], rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"]) #材質指定
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def bevelFnc(objName, segmentsVal, widthVal):
    """ ベベル（角丸め） """
    #bpy.context.view_layer.objects.active = objVal
    bpy.context.view_layer.objects.active = obj[objName]
    context = bpy.context
    ob = context.object
    bm = ob.modifiers.new(name="bevel", type='BEVEL',)
    bm.segments = segmentsVal
    bm.width = widthVal
    bm.custom_profile.update() 


def objCopy(objName, new_name, pnt):
    """オブジェクトの複製"""
    for obj in bpy.data.objects:
        obj.select_set(False)
    original_obj = bpy.data.objects[objName]
    original_obj.select_set(True)
    bpy.ops.object.duplicate_move(TRANSFORM_OT_translate={"value":pnt})
    new_obj = bpy.data.objects[objName + ".001"]
    new_obj.name = new_name


def changeMode():
    print( bpy.context.mode )
    bpy.ops.object.mode_set(mode='EDIT', toggle=False) # 編集モードに移行する
    print( bpy.context.mode )
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    print( bpy.context.mode )


def moveMesh(objName, faceNo,pnt):
    """面の押し出し"""
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    bpy.context.view_layer.objects.active = obj[objName]
    bpy.ops.object.mode_set(mode='EDIT')

    # 全てのメッシュを非選択状態にする.
    bpy.ops.mesh.select_all(action='DESELECT')
    
    # 面モードに設定.
    bpy.ops.mesh.select_mode(type="FACE")
    cube_bmesh = bmesh.from_edit_mesh(bpy.context.object.data)
    cube_bmesh.faces.ensure_lookup_table()
    cube_bmesh.faces[faceNo].select = True
    bpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={"value":pnt} )

    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)


def movePoint(objName, pointNo, pnt):
    '''頂点モードにし, 一つの頂点を動かす'''
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    bpy.context.view_layer.objects.active = obj[objName]
    bpy.ops.object.mode_set(mode='EDIT')

    # 全てのメッシュを非選択状態にする.
    bpy.ops.mesh.select_all(action='DESELECT')
    
    # 頂点モードに設定
    bpy.ops.mesh.select_mode(type="VERT")
    cube_bmesh = bmesh.from_edit_mesh(bpy.context.object.data)
    cube_bmesh.verts.ensure_lookup_table()
    cube_bmesh.verts[pointNo].select = True
    bpy.ops.transform.translate(value=pnt)
    # 標準モードに戻す
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)


def expansionFnc(TARGET, THICKNESS02):
    """ 拡大する """
    global alist
    THICKNESS01 = -1* THICKNESS02
    alist.append({"function": "movePoint", "args": [TARGET, 0, THICKNESS01, THICKNESS01, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 2, THICKNESS01, THICKNESS02, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 4, THICKNESS02, THICKNESS01, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 6, THICKNESS02, THICKNESS02, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 1, THICKNESS01, THICKNESS01, THICKNESS02]})
    alist.append({"function": "movePoint", "args": [TARGET, 3, THICKNESS01, THICKNESS02, THICKNESS02]})
    alist.append({"function": "movePoint", "args": [TARGET, 5, THICKNESS02, THICKNESS01, THICKNESS02]})
    alist.append({"function": "movePoint", "args": [TARGET, 7, THICKNESS02, THICKNESS02, THICKNESS02]})


def creObjFlow(args):
    """オブジェクト作成フロー"""
    # オブジェクトの作成
    for curObj in args:
        match curObj["OBJ"]:
            case "CUBE":
                objCube(curObj)
            case "CYLINDER":
                objCylinder(curObj)
            case "CONE":
                objCone(curObj)
            case "HEXA-CYLINDER":
                objHexaCylinder(curObj)
    # オブジェクトの編集
    for curObj in args:
        if "edit" in curObj:
            for act in curObj["edit"]:
                match act[0]:
                    case "moveMesh":
                        moveMesh(curObj["name"], act[1],act[2]) # 面の押し出し
                    case "bevelFnc":
                        bevelFnc(obj[ curObj["name"] ], act[1],act[2]) # 角丸め


def editFlow(args):
    """オブジェクトの編集"""
    for curObj in args:
        match curObj["function"]:
            case "booleanFnc":
                """ ブーリアン """
                booleanFnc(obj[ curObj["args"][0] ],obj[ curObj["args"][1] ]) # 
            case "deleteFnc":
                """ 削除 """
                deleteFnc(obj[ curObj["args"][0] ]) # 
            case "moveFnc2":
                """ 移動(Fnc2) """
                pnt = (curObj["args"][1], curObj["args"][2], curObj["args"][3])
                moveFnc2(obj[ curObj["args"][0] ], pnt ) 
            case "moveFnc3":
                """ 移動(Fnc3) """
                moveFnc3(obj[ curObj["args"][0] ], curObj["args"][1], curObj["args"][2] ) # 
            case "copyFnc":
                """ 複製 """
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                objCopy(curObj["args"][0], curObj["args"][1], pnt)
            case "rotateFnc":
                """ 回転 """
                pnt_x = math.radians(float(curObj["args"][1]))
                pnt_y = math.radians(float(curObj["args"][2]))
                pnt_z = math.radians(float(curObj["args"][3]))
                pnt = (pnt_x, pnt_y, pnt_z)
                rotateFnc(obj[curObj["args"][0]], pnt)
            case "movePoint":
                """ 点の移動 """
                objName = curObj["args"][0]
                pointNo = curObj["args"][1]
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                movePoint(objName, pointNo, pnt)
            case "bevelFnc":
                """ ベベル（角丸め） """
                objName = curObj["args"][0]
                segmentsVal = curObj["args"][1]
                widthVal = curObj["args"][2]
                bevelFnc(objName, segmentsVal, widthVal)
            case "moveMesh":
                """面の押し出し"""
                objName = curObj["args"][0]
                faceNo = curObj["args"][1]
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                moveMesh(objName, faceNo,pnt)


##-------------------------------##

#-----------------------#
#
# MDF材(100mmx100mmx6mm)で箱を作る留め具
#
#-----------------------#

base_x = 6.0  # MDF材の厚み(mm)
base_y = 2.0  # 保護する厚み(mm)
base_w = 10.0  # 留め具の幅(mm)
tome_w = 100.6  # 留め具の保護の幅(mm)
#hole_r = 1.7  # 穴の半径(mm)
hole_r = 1.4  # 穴の半径(mm)


#--------#

btm01_x = (base_x+base_y)/4
btm01_y = 0
btm01_z = 0
btm01_w = (base_x+base_y)/2
btm01_h = base_x+base_y
btm01_d = base_w/2

olist.append( {"OBJ": "CUBE", "name": "BOTTOM-01", "location": (btm01_x, btm01_y, btm01_z),   "size": (btm01_w, btm01_d, btm01_h), "rotation": (0,0,0), "material": mlist[12],} )



btm02_x = (base_x+base_y)/2 + tome_w/2
btm02_y = 0
btm02_z = -(base_x+base_y)/2 + base_y/2
btm02_w = tome_w
btm02_h = base_y
btm02_d = base_w

olist.append( {"OBJ": "CUBE", "name": "BOTTOM-02", "location": (btm02_x, btm02_y, btm02_z),   "size": (btm02_w, btm02_d, btm02_h), "rotation": (0,0,0), "material": mlist[13],} )







cylinder01_x = 0 
cylinder01_y = 0
cylinder01_z = 0
cylinder01_radius = (base_x+base_y)/2
cylinder01_depth = base_w/2

olist.append( {"OBJ": "CYLINDER","name": "CYLINDER-01", "location": (cylinder01_x, cylinder01_y, cylinder01_z),"radius": cylinder01_radius,"depth": cylinder01_depth, "rotation": (1.5708,0,0),"material": mlist[89],} )





hole01_x = 0 
hole01_y = 0
hole01_z = 0
hole01_radius = hole_r
hole01_depth = base_w *1.2

olist.append( {"OBJ": "CYLINDER","name": "HOLE-01", "location": (hole01_x, hole01_y, hole01_z),"radius": hole01_radius,"depth": hole01_depth, "rotation": (1.5708,0,0),"material": mlist[1],} )













##alist.append({"function": "copyFnc", "args": ["BOTTOM-01",   "BOTTOM-01-B"  ,0,  20, 0]})
##alist.append({"function": "copyFnc", "args": ["BOTTOM-02",   "BOTTOM-02-B"  ,0,  20, 0]})
##alist.append({"function": "copyFnc", "args": ["CYLINDER-01", "CYLINDER-02-B",0,  20, 0]})



alist.append({"function": "copyFnc", "args": ["BOTTOM-01",   "BOTTOM-03"  ,tome_w + (base_x+base_y)/2,  0, 0]})
alist.append({"function": "copyFnc", "args": ["CYLINDER-01", "CYLINDER-02"  ,tome_w + (base_x+base_y),  0, 0]})
alist.append({"function": "copyFnc", "args": ["HOLE-01",     "HOLE-02"  ,tome_w + (base_x+base_y),  0, 0]})



##alist.append({"function": "copyFnc", "args": ["BOTTOM-03",   "BOTTOM-03-B"  ,0,  20, 0]})
##alist.append({"function": "copyFnc", "args": ["CYLINDER-02", "CYLINDER-02-B",0,  20, 0]})


alist.append({"function": "booleanFnc", "args": ["CYLINDER-01","HOLE-01"]})
alist.append({"function": "booleanFnc", "args": ["BOTTOM-01","HOLE-01"]})

alist.append({"function": "booleanFnc", "args": ["CYLINDER-02","HOLE-02"]})
alist.append({"function": "booleanFnc", "args": ["BOTTOM-03","HOLE-02"]})

# 不要になったオブジェクトを削除
alist.append({"function": "deleteFnc", "args": ["HOLE-01"]})
alist.append({"function": "deleteFnc", "args": ["HOLE-02"]})



#----#

val_a = btm01_x - btm02_x
val_b = btm02_x
val_c = base_w / 4


#tmp_x = btm01_x - btm02_x
#tmp_y = base_w / 4
tmp_x = val_a
tmp_y = val_c
alist.append({"function": "moveFnc2", "args": ["BOTTOM-01", tmp_x, tmp_y, 0]})


#tmp_x = -btm02_x
#tmp_y = base_w / 4
tmp_x = -val_b
tmp_y = val_c
alist.append({"function": "moveFnc2", "args": ["CYLINDER-01", tmp_x, tmp_y, 0]})


#tmp_x = -btm01_x + btm02_x
#tmp_y = -base_w / 4

tmp_x = -val_a
tmp_y = -val_c
alist.append({"function": "moveFnc2", "args": ["BOTTOM-03", tmp_x, tmp_y, 0]})


#tmp_x = btm02_x
#tmp_y = -base_w / 4
tmp_x =  val_b
tmp_y = -val_c
alist.append({"function": "moveFnc2", "args": ["CYLINDER-02", tmp_x, tmp_y, 0]})


alist.append({"function": "moveFnc2", "args": ["BOTTOM-02", 0, 0, -(base_x+base_y)/2 + base_y/2]})
#----#

#----#
tmp_x = -base_w / 4
tmp_y =  btm01_x - btm02_x

alist.append({"function": "copyFnc", "args": ["BOTTOM-01",   "BOTTOM-01-C"  ,0, 0, 0]})
alist.append({"function": "rotateFnc", "args": ["BOTTOM-01-C",0,0,90]})
alist.append({"function": "moveFnc2", "args": ["BOTTOM-01-C", tmp_x, tmp_y, 0]})

tmp_x = -base_w / 4
tmp_y = -btm02_x

alist.append({"function": "copyFnc", "args": ["CYLINDER-01",   "CYLINDER-01-C"  ,0, 0, 0]})
alist.append({"function": "rotateFnc", "args": ["CYLINDER-01-C",0,90,0]})
alist.append({"function": "moveFnc2", "args": ["CYLINDER-01-C", tmp_x, tmp_y, 0]})

#tmp_y = -btm01_x + btm02_x
#tmp_x =  btm01_x - btm02_x

tmp_x = base_w / 4
tmp_y = tome_w /2 + (base_x+base_y)/4

alist.append({"function": "copyFnc", "args": ["BOTTOM-03", "BOTTOM-03-C" ,0, 0, 0]})
alist.append({"function": "rotateFnc", "args": ["BOTTOM-03-C",0,0,90]})
alist.append({"function": "moveFnc2", "args": ["BOTTOM-03-C", tmp_x, tmp_y, 0]})


#tmp_x = -btm02_x
#tmp_y =  btm02_x

tmp_x = base_w / 4
tmp_y = tome_w /2 + (base_x+base_y)/2

alist.append({"function": "copyFnc", "args": ["CYLINDER-02",   "CYLINDER-02-C" ,0, 0, 0]})
alist.append({"function": "rotateFnc", "args": ["CYLINDER-02-C",0,90,0]})
alist.append({"function": "moveFnc2", "args": ["CYLINDER-02-C", tmp_x, tmp_y, 0]})

tmp_x = btm01_x - btm02_x
alist.append({"function": "copyFnc", "args": ["BOTTOM-02",   "BOTTOM-02-C"  ,0, 0, 0]})
alist.append({"function": "rotateFnc", "args": ["BOTTOM-02",0,0,90]})


#----#







##-----##

tmp_x = tome_w/4
alist.append({"function": "copyFnc", "args": ["BOTTOM-02",     "A-BOTTOM-02" ,tmp_x, 0, 0]})
alist.append({"function": "copyFnc", "args": ["BOTTOM-01-C",   "A-BOTTOM-01" ,tmp_x, 0, 0]})
alist.append({"function": "copyFnc", "args": ["BOTTOM-03-C",   "A-BOTTOM-03" ,tmp_x, 0, 0]})
alist.append({"function": "copyFnc", "args": ["CYLINDER-01-C",  "A-CYLINDER-01" ,tmp_x, 0, 0]})
alist.append({"function": "copyFnc", "args": ["CYLINDER-02-C",  "A-CYLINDER-02" ,tmp_x, 0, 0]})



tmp_x = -tome_w/4
alist.append({"function": "copyFnc", "args": ["BOTTOM-02",     "B-BOTTOM-02" ,tmp_x, 0, 0]})
alist.append({"function": "copyFnc", "args": ["BOTTOM-01-C",   "B-BOTTOM-01" ,tmp_x, 0, 0]})
alist.append({"function": "copyFnc", "args": ["BOTTOM-03-C",   "B-BOTTOM-03" ,tmp_x, 0, 0]})
alist.append({"function": "copyFnc", "args": ["CYLINDER-01-C", "B-CYLINDER-01" ,tmp_x, 0, 0]})
alist.append({"function": "copyFnc", "args": ["CYLINDER-02-C", "B-CYLINDER-02" ,tmp_x, 0, 0]})



tmp_y = tome_w/4
alist.append({"function": "copyFnc", "args": ["BOTTOM-01",   "C-BOTTOM-01"   ,0, tmp_y, 0]})
alist.append({"function": "copyFnc", "args": ["BOTTOM-02-C", "C-BOTTOM-02"   ,0, tmp_y, 0]})
alist.append({"function": "copyFnc", "args": ["BOTTOM-03",   "C-BOTTOM-03"   ,0, tmp_y, 0]})
alist.append({"function": "copyFnc", "args": ["CYLINDER-01", "C-CYLINDER-01" ,0, tmp_y, 0]})
alist.append({"function": "copyFnc", "args": ["CYLINDER-02", "C-CYLINDER-02" ,0, tmp_y, 0]})


tmp_y = -tome_w/4
alist.append({"function": "copyFnc", "args": ["BOTTOM-01",   "C-BOTTOM-01"   ,0, tmp_y, 0]})
alist.append({"function": "copyFnc", "args": ["BOTTOM-02-C", "C-BOTTOM-02"   ,0, tmp_y, 0]})
alist.append({"function": "copyFnc", "args": ["BOTTOM-03",   "C-BOTTOM-03"   ,0, tmp_y, 0]})
alist.append({"function": "copyFnc", "args": ["CYLINDER-01", "C-CYLINDER-01" ,0, tmp_y, 0]})
alist.append({"function": "copyFnc", "args": ["CYLINDER-02", "C-CYLINDER-02" ,0, tmp_y, 0]})





##-----##

"""
alist.append({"function": "copyFnc", "args": ["CYLINDER-01", "TOME-01" ,100, 0, 0]})

cylinder01_x = 0 
cylinder01_y = 60
cylinder01_z = 0
cylinder01_radius = (base_x+base_y)/2
cylinder01_depth = base_w/4

olist.append( {"OBJ": "CYLINDER","name": "TOME-02", "location": (cylinder01_x, cylinder01_y, cylinder01_z),"radius": cylinder01_radius,"depth": cylinder01_depth, "rotation": (1.5708,0,0),"material": mlist[22],} )
alist.append({"function": "bevelFnc", "args": ["TOME-02", 15, 0.6]})
alist.append({"function": "moveFnc2", "args": ["TOME-02", 0, 70, -1]})
alist.append({"function": "rotateFnc", "args": ["TOME-02",0,0,90]})

alist.append({"function": "moveFnc2", "args": ["TOME-01", 0, 70, 1.5]})
alist.append({"function": "rotateFnc", "args": ["TOME-01",0,0,90]})
"""







cylinder01_x = 0 
cylinder01_y = 100
cylinder01_z = 3.7
cylinder01_radius = (base_x+base_y)/2 - 0.5
cylinder01_depth = 2*base_w/3

olist.append( {"OBJ": "CYLINDER","name": "TOMEGU-A", "location": (cylinder01_x, cylinder01_y, cylinder01_z),"radius": cylinder01_radius,"depth": cylinder01_depth, "rotation": (1.5708,0,0),"material": mlist[1],} )
alist.append({"function": "rotateFnc", "args": ["TOMEGU-A",0,0,90]})






cylinder01_x = 0 
cylinder01_y = 100
cylinder01_z = 0
cylinder01_radius = (base_x+base_y)/2 - 0.5
cylinder01_depth = 2*base_w/4

olist.append( {"OBJ": "CYLINDER","name": "TOMEGU-B", "location": (cylinder01_x, cylinder01_y, cylinder01_z),"radius": cylinder01_radius,"depth": cylinder01_depth, "rotation": (1.5708,0,0),"material": mlist[2],} )
alist.append({"function": "rotateFnc", "args": ["TOMEGU-B",0,0,90]})
alist.append({"function": "bevelFnc", "args": ["TOMEGU-B", 15, 0.6]})


cone_x = 0 
cone_y = 100
cone_z = 2.3
cone_radius1 = 1.2
cone_radius2 = 1.4
cone_depth = base_w

olist.append( {"OBJ": "CONE","name": "TOME-HOLE","location": (cone_x, cone_y, cone_z),"vertices": 32, "radius1": cone_radius1, "radius2": cone_radius2, "depth": cone_depth,"rotation": (0,0,0),"material": mlist[3],} )

alist.append({"function": "booleanFnc", "args": ["TOMEGU-A","TOME-HOLE"]})
alist.append({"function": "booleanFnc", "args": ["TOMEGU-B","TOME-HOLE"]})

# 不要になったオブジェクトを削除
alist.append({"function": "deleteFnc", "args": ["TOME-HOLE"]})





#############################################
# 処理開始
## オブジェクト作成
creObjFlow(olist)
## オブジェクト加工
editFlow(alist)
