##---------------------------------------##
##
## できるだけ簡単に箱を作る留め具を3Dプリンターで作りたい
## フタ付き
## MDF材(100mm x 100mm x 6mm)と3DCGで作った留め具で箱を作りたい
## MDF材にはできるだけ加工しなように工夫した。
## フタ用のMDF材にボルトを4つ埋めるだけ
## 
##---------------------------------------##

import bpy
import bmesh
import random
import math

# 変数
obj = bpy.data.objects
olist = [] # オブジェクトパラメータ群
mlist = [] # マテリアル群
alist = [] # オブジェクト編集

# 1.既存要素削除
for item in bpy.data.meshes:
    bpy.data.meshes.remove(item)

# 2.材質の定義
random.seed(110) # 乱数のシード設定
for i in range(100):
    mlist.append( bpy.data.materials.new('mat{}'.format(i) ) )
    mlist[-1].diffuse_color = (random.random(), random.random(), random.random(), 1.0)

##-------------------------------##
def booleanFnc(obj01 , obj02):
    """ブーリアン"""
    bool01 = obj01.modifiers.new(type="BOOLEAN", name="bool_01")
    bool01.object = obj02
    bool01.operation = 'DIFFERENCE'
    bpy.context.view_layer.objects.active = obj01
    bpy.ops.object.modifier_apply(modifier="bool_01")


def moveFnc(obj01, mX, mY, mZ):
    """オブジェクト移動"""
    bpy.context.view_layer.objects.active = obj01
    obj01.location = ( mX, mY, mZ )


def moveFnc2(obj01, pnt):
    """オブジェクト移動2"""
    bpy.context.view_layer.objects.active = obj01
    obj01.location = pnt


def moveFnc3(obj01, pnt, flg ):
    """オブジェクト移動3 ※ flg=0 -> 現在座標 , flg=1 -> 移動"""
    tgtX = obj01.location[0]
    tgtY = obj01.location[1]
    tgtZ = obj01.location[2]
    
    if flg[0] == 1:
        tgtX = pnt[0]
    if flg[1] == 1:
        tgtY = pnt[1] 
    if flg[2] == 1:
        tgtZ = pnt[2]
    
    pnt = ( tgtX, tgtY, tgtZ )
    
    bpy.context.view_layer.objects.active = obj01
    obj01.location = pnt
    print("#2 {}".format(obj01.location) )
    print("#3 {0} {1} {2}".format(pnt[0],pnt[1],pnt[2]) )


def rotateFnc(obj01, angle):
    """オブジェクト回転"""
    bpy.context.view_layer.objects.active = obj01
    obj01.rotation_euler = angle


def hideFnc(obj01, setVal):
    """オブジェクト非表示"""
    bpy.context.view_layer.objects.active = obj01
    bpy.context.object.hide_set( setVal )


def deleteFnc(obj01):
    """オブジェクト削除"""
    bpy.data.objects.remove(obj01)


def objCube(args):
    """オブジェクト立方体作成"""
    bpy.ops.mesh.primitive_cube_add(location=args["location"], size=1.0 , rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"])  #材質指定
    bpy.ops.transform.resize(value=args["size"]) #図形変形
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def objCylinder(args):
    """オブジェクト円柱作成"""
    bpy.ops.mesh.primitive_cylinder_add(location=args["location"], radius=args["radius"], depth=args["depth"], rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"]) #材質指定
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def objCone(args):
    """円錐"""
    bpy.ops.mesh.primitive_cone_add(location=args["location"],vertices=args["vertices"],radius1=args["radius1"],radius2=args["radius2"],depth=args["depth"], rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"]) #材質指定
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def bevelFnc(objName, segmentsVal, widthVal):
    """ ベベル（角丸め） """
    #bpy.context.view_layer.objects.active = objVal
    bpy.context.view_layer.objects.active = obj[objName]
    context = bpy.context
    ob = context.object
    bm = ob.modifiers.new(name="bevel", type='BEVEL',)
    bm.segments = segmentsVal
    bm.width = widthVal
    bm.custom_profile.update() 


def objCopy(objName, new_name, pnt):
    """オブジェクトの複製"""
    for obj in bpy.data.objects:
        obj.select_set(False)
    original_obj = bpy.data.objects[objName]
    original_obj.select_set(True)
    bpy.ops.object.duplicate_move(TRANSFORM_OT_translate={"value":pnt})
    new_obj = bpy.data.objects[objName + ".001"]
    new_obj.name = new_name


def changeMode():
    print( bpy.context.mode )
    bpy.ops.object.mode_set(mode='EDIT', toggle=False) # 編集モードに移行する
    print( bpy.context.mode )
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    print( bpy.context.mode )


def moveMesh(objName, faceNo,pnt):
    """面の押し出し"""
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    bpy.context.view_layer.objects.active = obj[objName]
    bpy.ops.object.mode_set(mode='EDIT')

    # 全てのメッシュを非選択状態にする.
    bpy.ops.mesh.select_all(action='DESELECT')
    
    # 面モードに設定.
    bpy.ops.mesh.select_mode(type="FACE")
    cube_bmesh = bmesh.from_edit_mesh(bpy.context.object.data)
    cube_bmesh.faces.ensure_lookup_table()
    cube_bmesh.faces[faceNo].select = True
    bpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={"value":pnt} )

    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)


def movePoint(objName, pointNo, pnt):
    '''頂点モードにし, 一つの頂点を動かす'''
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    bpy.context.view_layer.objects.active = obj[objName]
    bpy.ops.object.mode_set(mode='EDIT')

    # 全てのメッシュを非選択状態にする.
    bpy.ops.mesh.select_all(action='DESELECT')
    
    # 頂点モードに設定
    bpy.ops.mesh.select_mode(type="VERT")
    cube_bmesh = bmesh.from_edit_mesh(bpy.context.object.data)
    cube_bmesh.verts.ensure_lookup_table()
    cube_bmesh.verts[pointNo].select = True
    bpy.ops.transform.translate(value=pnt)
    # 標準モードに戻す
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)


def expansionFnc(TARGET, THICKNESS02):
    """ 拡大する """
    global alist
    THICKNESS01 = -1* THICKNESS02
    alist.append({"function": "movePoint", "args": [TARGET, 0, THICKNESS01, THICKNESS01, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 2, THICKNESS01, THICKNESS02, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 4, THICKNESS02, THICKNESS01, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 6, THICKNESS02, THICKNESS02, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 1, THICKNESS01, THICKNESS01, THICKNESS02]})
    alist.append({"function": "movePoint", "args": [TARGET, 3, THICKNESS01, THICKNESS02, THICKNESS02]})
    alist.append({"function": "movePoint", "args": [TARGET, 5, THICKNESS02, THICKNESS01, THICKNESS02]})
    alist.append({"function": "movePoint", "args": [TARGET, 7, THICKNESS02, THICKNESS02, THICKNESS02]})


def creObjFlow(args):
    """オブジェクト作成フロー"""
    # オブジェクトの作成
    for curObj in args:
        match curObj["OBJ"]:
            case "CUBE":
                objCube(curObj)
            case "CYLINDER":
                objCylinder(curObj)
            case "CONE":
                objCone(curObj)
    # オブジェクトの編集
    for curObj in args:
        if "edit" in curObj:
            for act in curObj["edit"]:
                match act[0]:
                    case "moveMesh":
                        moveMesh(curObj["name"], act[1],act[2]) # 面の押し出し
                    case "bevelFnc":
                        bevelFnc(obj[ curObj["name"] ], act[1],act[2]) # 角丸め


def editFlow(args):
    """オブジェクトの編集"""
    for curObj in args:
        match curObj["function"]:
            case "booleanFnc":
                """ ブーリアン """
                booleanFnc(obj[ curObj["args"][0] ],obj[ curObj["args"][1] ]) # 
            case "deleteFnc":
                """ 削除 """
                deleteFnc(obj[ curObj["args"][0] ]) # 
            case "moveFnc2":
                """ 移動(Fnc2) """
                pnt = (curObj["args"][1], curObj["args"][2], curObj["args"][3])
                moveFnc2(obj[ curObj["args"][0] ], pnt ) 
            case "moveFnc3":
                """ 移動(Fnc3) """
                moveFnc3(obj[ curObj["args"][0] ], curObj["args"][1], curObj["args"][2] ) # 
            case "copyFnc":
                """ 複製 """
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                objCopy(curObj["args"][0], curObj["args"][1], pnt)
            case "rotateFnc":
                """ 回転 """
                pnt_x = math.radians(float(curObj["args"][1]))
                pnt_y = math.radians(float(curObj["args"][2]))
                pnt_z = math.radians(float(curObj["args"][3]))
                pnt = (pnt_x, pnt_y, pnt_z)
                rotateFnc(obj[curObj["args"][0]], pnt)
            case "movePoint":
                """ 点の移動 """
                objName = curObj["args"][0]
                pointNo = curObj["args"][1]
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                movePoint(objName, pointNo, pnt)
            case "bevelFnc":
                """ ベベル（角丸め） """
                objName = curObj["args"][0]
                segmentsVal = curObj["args"][1]
                widthVal = curObj["args"][2]
                bevelFnc(objName, segmentsVal, widthVal)
            case "moveMesh":
                """面の押し出し"""
                objName = curObj["args"][0]
                faceNo = curObj["args"][1]
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                moveMesh(objName, faceNo,pnt)


##-------------------------------##

# 挟み込む板の厚み(mm)
PlateWidth = 5

############################################
# 一番底の立方体
ScaleX = 30.0
ScaleY = 30.0
ScaleZ = 5.0
LocateX = -11.0
LocateY = -10.0
LocateZ = -17.0
olist.append( {"OBJ": "CUBE", "name": "Bottom01", "location": (LocateX,LocateY,LocateZ), "size": (ScaleX,ScaleY,ScaleZ), "rotation": (0.0,0.0,0.0), "material": mlist[40],} )

# 支柱
ScaleX = 9.0
ScaleY = 9.0
ScaleZ = 21.0
LocateX =-0.5
LocateY = 0.5
LocateZ = -4.0
olist.append( {"OBJ": "CUBE", "name": "Pole", "location": (LocateX,LocateY,LocateZ), "size": (ScaleX,ScaleY,ScaleZ), "rotation": (1.5708,0.0,0.0), "material": mlist[15],} )

# 側面
ScaleX = 22.0
ScaleY = 3.0
ScaleZ = 21.0
LocateX = -15.0
LocateY = 3.5
LocateZ = -4
olist.append( {"OBJ": "CUBE", "name": "Side01", "location": (LocateX,LocateY,LocateZ), "size": (ScaleX,ScaleY,ScaleZ), "rotation": (0.0,0.0,0.0), "material": mlist[31],} )

# 側面
ScaleX = 3.0
ScaleY = 22.0
ScaleZ = 21.0
LocateX =  2.5
LocateY = -14.0
LocateZ = -4.0
olist.append( {"OBJ": "CUBE", "name": "Side02", "location": (LocateX,LocateY,LocateZ), "size": (ScaleX,ScaleY,ScaleZ), "rotation": (0.0,0.0,0.0), "material": mlist[32],} )


# HOLE-CUBE
ScaleX = 30.2
ScaleY = 30.2
ScaleZ = 10.0
LocateX = -20.0
LocateY = -19.0
LocateZ = -22.5
olist.append( {"OBJ": "CUBE", "name": "HoleCube01", "location": (LocateX,LocateY,LocateZ), "size": (ScaleX,ScaleY,ScaleZ), "rotation": (0.0,0.0,0.0), "material": mlist[10],} )
alist.append({"function": "booleanFnc", "args": ["Bottom01","HoleCube01"]})


# HOLE-POLE
PlateLegoX = 10
PlateLegoY = 50
PlateLegoZ = 10
BasePntX = 4.2
BasePntY = 5.2
BasePntZ = -13
olist.append( {"OBJ": "CUBE", "name": "HolePole01", "location": (BasePntX,BasePntY,BasePntZ), "size": (PlateLegoX,PlateLegoY,PlateLegoZ), "rotation": (1.5708,0,0), "material": mlist[12],} )
alist.append({"function": "rotateFnc", "args": ["HolePole01",0,0,45]})
alist.append({"function": "booleanFnc", "args": ["Pole","HolePole01"]})
alist.append({"function": "booleanFnc", "args": ["Bottom01","HolePole01"]})
alist.append({"function": "deleteFnc", "args": ["HolePole01"]})



# HOLE-BOTTOM
PlateLegoX = 50
PlateLegoY = 50
PlateLegoZ = 50
BasePntX = -32.5
BasePntY = -33.5
BasePntZ = -13
olist.append( {"OBJ": "CUBE", "name": "HoleBtm01", "location": (BasePntX,BasePntY,BasePntZ), "size": (PlateLegoX,PlateLegoY,PlateLegoZ), "rotation": (1.5708,0,0), "material": mlist[13],} )
alist.append({"function": "rotateFnc", "args": ["HoleBtm01",0,0,45]})
alist.append({"function": "booleanFnc", "args": ["Bottom01","HoleBtm01"]})




#"""
# 角丸め
PlateLegoX = 30
PlateLegoY = 5
PlateLegoZ = 5
BasePntX = -19.9
BasePntY = -5
BasePntZ = -21.7
olist.append( {"OBJ": "CUBE", "name": "BtmKadoMaru01", "location": (BasePntX,BasePntY,BasePntZ), "size": (PlateLegoX,PlateLegoY,PlateLegoZ), "rotation": (1.5708,0,0), "material": mlist[16],} )
alist.append({"function": "rotateFnc", "args": ["BtmKadoMaru01",45,0,0]})
alist.append({"function": "booleanFnc", "args": ["Bottom01","BtmKadoMaru01"]})
alist.append({"function": "deleteFnc", "args": ["BtmKadoMaru01"]})

PlateLegoX = 5
PlateLegoY = 30
PlateLegoZ = 5
BasePntX = -6
BasePntY = -18.9
BasePntZ = -21.7
olist.append( {"OBJ": "CUBE", "name": "BtmKadoMaru02", "location": (BasePntX,BasePntY,BasePntZ), "size": (PlateLegoX,PlateLegoY,PlateLegoZ), "rotation": (1.5708,0,0), "material": mlist[17],} )
alist.append({"function": "rotateFnc", "args": ["BtmKadoMaru02",90,45,0]})
alist.append({"function": "booleanFnc", "args": ["Bottom01","BtmKadoMaru02"]})
alist.append({"function": "deleteFnc", "args": ["BtmKadoMaru02"]})

# 一番底の立方体
############################################






# 立方体
PlateLegoX = 10
PlateLegoY = 50
PlateLegoZ = 10
BasePntX = 6.0
BasePntY = -9.0
BasePntZ = -20.5
olist.append( {"OBJ": "CUBE", "name": "BtmKado01", "location": (BasePntX,BasePntY,BasePntZ), "size": (PlateLegoX,PlateLegoY,PlateLegoZ), "rotation": (1.5708,0,0), "material": mlist[80],} )
alist.append({"function": "rotateFnc", "args": ["BtmKado01",90,45,0]})
alist.append({"function": "booleanFnc", "args": ["Bottom01","BtmKado01"]})
alist.append({"function": "deleteFnc", "args": ["BtmKado01"]})





# 立方体
PlateLegoX = 50
PlateLegoY = 10
PlateLegoZ = 10
BasePntX = -8
BasePntY = 7
BasePntZ = -20.5
olist.append( {"OBJ": "CUBE", "name": "BtmKado02", "location": (BasePntX,BasePntY,BasePntZ), "size": (PlateLegoX,PlateLegoY,PlateLegoZ), "rotation": (1.5708,0,0), "material": mlist[81],} )
alist.append({"function": "rotateFnc", "args": ["BtmKado02",45,0,0]})
alist.append({"function": "booleanFnc", "args": ["Bottom01","BtmKado02"]})
alist.append({"function": "deleteFnc", "args": ["BtmKado02"]})


# TOP
alist.append({"function": "copyFnc",  "args": ["Bottom01", "Top01",0, -50, 0]})
alist.append({"function": "copyFnc",  "args": ["Pole", "PoleTop01",0, -50, 0]})
alist.append({"function": "copyFnc",  "args": ["Side01", "SideTop01",0, -50, 0]})
alist.append({"function": "copyFnc",  "args": ["Side02", "SideTop02",0, -50, 0]})

alist.append({"function": "copyFnc",  "args": ["HoleCube01", "HoleCube02",0, -50, 0]})
alist.append({"function": "deleteFnc", "args": ["HoleCube01"]})
alist.append({"function": "copyFnc",  "args": ["HoleBtm01", "HoleBtm02",0, -50, 0]})
alist.append({"function": "deleteFnc", "args": ["HoleBtm01"]})



ScaleX = 30.0
ScaleY = 30.0
ScaleZ = 20.0
LocateX = -20
LocateY = -69
LocateZ = -17
olist.append( {"OBJ": "CUBE", "name": "TopHole01", "location": (LocateX,LocateY,LocateZ), "size": (ScaleX,ScaleY,ScaleZ), "rotation": (0.0,0.0,0.0), "material": mlist[56],} )
alist.append({"function": "booleanFnc", "args": ["Top01","TopHole01"]})
alist.append({"function": "deleteFnc", "args": ["TopHole01"]})


ScaleX = 21.0
ScaleY = 21.0
ScaleZ = 7.0
LocateX = -15.5
LocateY = -64.5
LocateZ = -16
olist.append( {"OBJ": "CUBE", "name": "TOP02", "location": (LocateX,LocateY,LocateZ), "size": (ScaleX,ScaleY,ScaleZ), "rotation": (0.0,0.0,0.0), "material": mlist[60],} )

ScaleX = 21.0
ScaleY = 21.0
ScaleZ = 9.0
LocateX = -22.5
LocateY = -71.5
LocateZ = -16
olist.append( {"OBJ": "CUBE", "name": "TOPHOLE02", "location": (LocateX,LocateY,LocateZ), "size": (ScaleX,ScaleY,ScaleZ), "rotation": (0.0,0.0,0.0), "material": mlist[61],} )

alist.append({"function": "booleanFnc", "args": ["TOP02","TOPHOLE02"]})
alist.append({"function": "deleteFnc", "args": ["TOPHOLE02"]})


alist.append({"function": "booleanFnc", "args": ["TOP02","HoleCube02"]})
alist.append({"function": "deleteFnc", "args": ["HoleCube02"]})

alist.append({"function": "booleanFnc", "args": ["TOP02","HoleBtm02"]})
alist.append({"function": "deleteFnc", "args": ["HoleBtm02"]})


# HOLE-MAGNET
radiusTumaTate = 3.2
radiusTumaYoko = 3.2
depthTuma = 2.7
LocateX = -9.5
LocateY = -58.5
LocateZ = -16.5


olist.append( {"OBJ": "CYLINDER","name": "HoleMag01","location": (LocateX,LocateY,LocateZ),"radius": radiusTumaYoko,"depth": depthTuma,"rotation": (0,0,0),"material": mlist[62],} )
alist.append({"function": "booleanFnc", "args": ["TOP02","HoleMag01"]})
alist.append({"function": "deleteFnc", "args": ["HoleMag01"]})


# 角丸め
PlateLegoX = 30
PlateLegoY = 5
PlateLegoZ = 5
BasePntX = -14
BasePntY = -52.8
BasePntZ = -10.5
olist.append( {"OBJ": "CUBE", "name": "KadoMaru01", "location": (BasePntX,BasePntY,BasePntZ), "size": (PlateLegoX,PlateLegoY,PlateLegoZ), "rotation": (1.5708,0,0), "material": mlist[16],} )
alist.append({"function": "rotateFnc", "args": ["KadoMaru01",45,0,0]})
alist.append({"function": "booleanFnc", "args": ["TOP02","KadoMaru01"]})
alist.append({"function": "deleteFnc", "args": ["KadoMaru01"]})

PlateLegoX = 5
PlateLegoY = 30
PlateLegoZ = 5
BasePntX = -3.7
BasePntY = -63
BasePntZ = -10.55
olist.append( {"OBJ": "CUBE", "name": "KadoMaru02", "location": (BasePntX,BasePntY,BasePntZ), "size": (PlateLegoX,PlateLegoY,PlateLegoZ), "rotation": (1.5708,0,0), "material": mlist[17],} )
alist.append({"function": "rotateFnc", "args": ["KadoMaru02",90,45,0]})
alist.append({"function": "booleanFnc", "args": ["TOP02","KadoMaru02"]})
alist.append({"function": "deleteFnc", "args": ["KadoMaru02"]})







#############################################
# 処理開始
## オブジェクト作成
creObjFlow(olist)
## オブジェクト加工
editFlow(alist)
