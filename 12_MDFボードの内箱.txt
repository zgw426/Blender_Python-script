##---------------------------------------##
##
## MDF材(100mm x 100mm x 6mm)で作った箱にはいる
## 中の箱を作る
## 箱の位置を固定するガイド付き
## 
##---------------------------------------##


import bpy
import bmesh
import random
import math

# 変数
obj = bpy.data.objects
olist = [] # オブジェクトパラメータ群
mlist = [] # マテリアル群
alist = [] # オブジェクト編集

# 1.既存要素削除
for item in bpy.data.meshes:
    bpy.data.meshes.remove(item)

# 2.材質の定義
random.seed(110) # 乱数のシード設定
for i in range(100):
    mlist.append( bpy.data.materials.new('mat{}'.format(i) ) )
    mlist[-1].diffuse_color = (random.random(), random.random(), random.random(), 1.0)

##-------------------------------##
def booleanFnc(obj01 , obj02):
    """ブーリアン"""
    bool01 = obj01.modifiers.new(type="BOOLEAN", name="bool_01")
    bool01.object = obj02
    bool01.operation = 'DIFFERENCE'
    bpy.context.view_layer.objects.active = obj01
    bpy.ops.object.modifier_apply(modifier="bool_01")


def moveFnc(obj01, mX, mY, mZ):
    """オブジェクト移動"""
    bpy.context.view_layer.objects.active = obj01
    obj01.location = ( mX, mY, mZ )


def moveFnc2(obj01, pnt):
    """オブジェクト移動2"""
    bpy.context.view_layer.objects.active = obj01
    obj01.location = pnt


def moveFnc3(obj01, pnt, flg ):
    """オブジェクト移動3 ※ flg=0 -> 現在座標 , flg=1 -> 移動"""
    tgtX = obj01.location[0]
    tgtY = obj01.location[1]
    tgtZ = obj01.location[2]
    
    if flg[0] == 1:
        tgtX = pnt[0]
    if flg[1] == 1:
        tgtY = pnt[1] 
    if flg[2] == 1:
        tgtZ = pnt[2]
    
    pnt = ( tgtX, tgtY, tgtZ )
    
    bpy.context.view_layer.objects.active = obj01
    obj01.location = pnt
    print("#2 {}".format(obj01.location) )
    print("#3 {0} {1} {2}".format(pnt[0],pnt[1],pnt[2]) )


def rotateFnc(obj01, angle):
    """オブジェクト回転"""
    bpy.context.view_layer.objects.active = obj01
    obj01.rotation_euler = angle


def hideFnc(obj01, setVal):
    """オブジェクト非表示"""
    bpy.context.view_layer.objects.active = obj01
    bpy.context.object.hide_set( setVal )


def deleteFnc(obj01):
    """オブジェクト削除"""
    bpy.data.objects.remove(obj01)


def objCube(args):
    """オブジェクト立方体作成"""
    bpy.ops.mesh.primitive_cube_add(location=args["location"], size=1.0 , rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"])  #材質指定
    bpy.ops.transform.resize(value=args["size"]) #図形変形
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def objCylinder(args):
    """オブジェクト円柱作成"""
    bpy.ops.mesh.primitive_cylinder_add(location=args["location"], radius=args["radius"], depth=args["depth"], rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"]) #材質指定
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def objHexaCylinder(args):
    """オブジェクト六角柱作成"""
    bpy.ops.mesh.primitive_cylinder_add(vertices = 6, location=args["location"], radius=args["radius"], depth=args["depth"], rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"]) #材質指定
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def objCone(args):
    """円錐"""
    bpy.ops.mesh.primitive_cone_add(location=args["location"],vertices=args["vertices"],radius1=args["radius1"],radius2=args["radius2"],depth=args["depth"], rotation=args["rotation"])
    bpy.context.object.data.materials.append(args["material"]) #材質指定
    obj0 = bpy.context.view_layer.objects.active
    obj0.name = args["name"]


def bevelFnc(objName, segmentsVal, widthVal):
    """ ベベル（角丸め） """
    #bpy.context.view_layer.objects.active = objVal
    bpy.context.view_layer.objects.active = obj[objName]
    context = bpy.context
    ob = context.object
    bm = ob.modifiers.new(name="bevel", type='BEVEL',)
    bm.segments = segmentsVal
    bm.width = widthVal
    bm.custom_profile.update() 


def objCopy(objName, new_name, pnt):
    """オブジェクトの複製"""
    for obj in bpy.data.objects:
        obj.select_set(False)
    original_obj = bpy.data.objects[objName]
    original_obj.select_set(True)
    bpy.ops.object.duplicate_move(TRANSFORM_OT_translate={"value":pnt})
    new_obj = bpy.data.objects[objName + ".001"]
    new_obj.name = new_name


def changeMode():
    print( bpy.context.mode )
    bpy.ops.object.mode_set(mode='EDIT', toggle=False) # 編集モードに移行する
    print( bpy.context.mode )
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    print( bpy.context.mode )


def moveMesh(objName, faceNo,pnt):
    """面の押し出し"""
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    bpy.context.view_layer.objects.active = obj[objName]
    bpy.ops.object.mode_set(mode='EDIT')

    # 全てのメッシュを非選択状態にする.
    bpy.ops.mesh.select_all(action='DESELECT')
    
    # 面モードに設定.
    bpy.ops.mesh.select_mode(type="FACE")
    cube_bmesh = bmesh.from_edit_mesh(bpy.context.object.data)
    cube_bmesh.faces.ensure_lookup_table()
    cube_bmesh.faces[faceNo].select = True
    bpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={"value":pnt} )

    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)





def scaleFace(objName, faceNo, scale_factor):
    """選択した面を拡大する"""
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    bpy.context.view_layer.objects.active = bpy.data.objects[objName]
    bpy.ops.object.mode_set(mode='EDIT')

    # 全てのメッシュを非選択状態にする.
    bpy.ops.mesh.select_all(action='DESELECT')
    
    # 面モードに設定.
    bpy.ops.mesh.select_mode(type="FACE")
    cube_bmesh = bmesh.from_edit_mesh(bpy.context.object.data)
    cube_bmesh.faces.ensure_lookup_table()
    cube_bmesh.faces[faceNo].select = True

    # 面を拡大する.
    bpy.ops.transform.resize(value=scale_factor)

    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)










def movePoint(objName, pointNo, pnt):
    '''頂点モードにし, 一つの頂点を動かす'''
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)
    bpy.context.view_layer.objects.active = obj[objName]
    bpy.ops.object.mode_set(mode='EDIT')

    # 全てのメッシュを非選択状態にする.
    bpy.ops.mesh.select_all(action='DESELECT')
    
    # 頂点モードに設定
    bpy.ops.mesh.select_mode(type="VERT")
    cube_bmesh = bmesh.from_edit_mesh(bpy.context.object.data)
    cube_bmesh.verts.ensure_lookup_table()
    cube_bmesh.verts[pointNo].select = True
    bpy.ops.transform.translate(value=pnt)
    # 標準モードに戻す
    bpy.ops.object.mode_set(mode='OBJECT', toggle=False)


def expansionFnc(TARGET, THICKNESS02):
    """ 拡大する """
    global alist
    THICKNESS01 = -1* THICKNESS02
    alist.append({"function": "movePoint", "args": [TARGET, 0, THICKNESS01, THICKNESS01, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 2, THICKNESS01, THICKNESS02, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 4, THICKNESS02, THICKNESS01, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 6, THICKNESS02, THICKNESS02, THICKNESS01]})
    alist.append({"function": "movePoint", "args": [TARGET, 1, THICKNESS01, THICKNESS01, THICKNESS02]})
    alist.append({"function": "movePoint", "args": [TARGET, 3, THICKNESS01, THICKNESS02, THICKNESS02]})
    alist.append({"function": "movePoint", "args": [TARGET, 5, THICKNESS02, THICKNESS01, THICKNESS02]})
    alist.append({"function": "movePoint", "args": [TARGET, 7, THICKNESS02, THICKNESS02, THICKNESS02]})


def creObjFlow(args):
    """オブジェクト作成フロー"""
    # オブジェクトの作成
    for curObj in args:
        match curObj["OBJ"]:
            case "CUBE":
                objCube(curObj)
            case "CYLINDER":
                objCylinder(curObj)
            case "CONE":
                objCone(curObj)
            case "HEXA-CYLINDER":
                objHexaCylinder(curObj)
    # オブジェクトの編集
    for curObj in args:
        if "edit" in curObj:
            for act in curObj["edit"]:
                match act[0]:
                    case "moveMesh":
                        moveMesh(curObj["name"], act[1],act[2]) # 面の押し出し
                    case "bevelFnc":
                        bevelFnc(obj[ curObj["name"] ], act[1],act[2]) # 角丸め


def editFlow(args):
    """オブジェクトの編集"""
    for curObj in args:
        match curObj["function"]:
            case "booleanFnc":
                """ ブーリアン """
                booleanFnc(obj[ curObj["args"][0] ],obj[ curObj["args"][1] ]) # 
            case "deleteFnc":
                """ 削除 """
                deleteFnc(obj[ curObj["args"][0] ]) # 
            case "moveFnc2":
                """ 移動(Fnc2) """
                pnt = (curObj["args"][1], curObj["args"][2], curObj["args"][3])
                moveFnc2(obj[ curObj["args"][0] ], pnt ) 
            case "moveFnc3":
                """ 移動(Fnc3) """
                moveFnc3(obj[ curObj["args"][0] ], curObj["args"][1], curObj["args"][2] ) # 
            case "copyFnc":
                """ 複製 """
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                objCopy(curObj["args"][0], curObj["args"][1], pnt)
            case "rotateFnc":
                """ 回転 """
                pnt_x = math.radians(float(curObj["args"][1]))
                pnt_y = math.radians(float(curObj["args"][2]))
                pnt_z = math.radians(float(curObj["args"][3]))
                pnt = (pnt_x, pnt_y, pnt_z)
                rotateFnc(obj[curObj["args"][0]], pnt)
            case "movePoint":
                """ 点の移動 """
                objName = curObj["args"][0]
                pointNo = curObj["args"][1]
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                movePoint(objName, pointNo, pnt)
            case "bevelFnc":
                """ ベベル（角丸め） """
                objName = curObj["args"][0]
                segmentsVal = curObj["args"][1]
                widthVal = curObj["args"][2]
                bevelFnc(objName, segmentsVal, widthVal)
            case "moveMesh":
                """選択した面の押し出し"""
                objName = curObj["args"][0]
                faceNo = curObj["args"][1]
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                moveMesh(objName, faceNo,pnt)

            case "scaleMesh":
                """選択した面の拡大"""
                objName = curObj["args"][0]
                faceNo = curObj["args"][1]
                pnt = (curObj["args"][2], curObj["args"][3], curObj["args"][4])
                scaleFace(objName, faceNo,pnt)

##-------------------------------##

#-----------------------#
#
# MDF材(100mmx100mmx6mm)で箱を作る留め具
#
#-----------------------#

base_thickness_1 = 3.0  # 厚み(mm)
base_thickness_2 = 5.0  # 厚み(mm)

mdf_vertical   = 99.8  # MDFの幅(mm)
mdf_horizontal = 99.8  # MDFの幅(mm)
mdf_depth      = 99.8

base_vertical = mdf_vertical
base_horizontal = mdf_horizontal
base_depth = 12


box_vertical = base_vertical/2
box_horizontal = base_horizontal/2
box_depth = mdf_depth - base_depth
box_btm_rate = 0.6

#--------#

locate_x = 0
locate_y = 0
locate_z = 0
size_x = box_vertical
size_y = box_horizontal
size_z_btm = base_depth
size_z_top = box_depth


olist.append( {"OBJ": "CUBE", "name": "A-BOTTOM-01", "location": (locate_x, locate_y, locate_z), "size": (size_x, size_y, size_z_btm), "rotation": (0,0,0), "material": mlist[30],} )
alist.append({"function": "scaleMesh", "args": ["A-BOTTOM-01", 4, box_btm_rate,box_btm_rate,1]})
alist.append({"function": "moveMesh", "args": ["A-BOTTOM-01", 5, 0,0,size_z_top]})


#"""
locate_x = 0
locate_y = 0
locate_z = base_thickness_1
size_x = box_vertical - base_thickness_1
size_y = box_horizontal - base_thickness_1
size_z_btm = base_depth
size_z_top = box_depth
#"""


olist.append( {"OBJ": "CUBE", "name": "A-HOLE-01", "location": (locate_x, locate_y, locate_z), "size": (size_x, size_y, size_z_btm), "rotation": (0,0,0), "material": mlist[31],} )
alist.append({"function": "scaleMesh", "args": ["A-HOLE-01", 4, box_btm_rate,box_btm_rate,1]})
alist.append({"function": "moveMesh", "args": ["A-HOLE-01", 5, 0,0,size_z_top]})
alist.append({"function": "booleanFnc", "args": ["A-BOTTOM-01","A-HOLE-01"]})
alist.append({"function": "deleteFnc", "args": ["A-HOLE-01"]})

## 取っ手
locate_x = -(mdf_vertical)/4 - -base_thickness_1
locate_y = 0
locate_z = 89.5
size_x = base_thickness_1
size_y = base_vertical *0.5 * 0.7
size_z_btm = 8

olist.append( {"OBJ": "CUBE", "name": "A-TOTE-01", "location": (locate_x, locate_y, locate_z), "size": (size_x, size_y, size_z_btm), "rotation": (0,0,0), "material": mlist[39],} )
alist.append({"function": "scaleMesh", "args": ["A-TOTE-01", 2, 0.5,1,0.5]})




##--- 2x1 ---##

alist.append({"function": "copyFnc", "args": ["A-BOTTOM-01", "B-BOTTOM-01",-100,  0, 0]})
alist.append({"function": "copyFnc", "args": ["B-BOTTOM-01", "B-BOTTOM-02", 0, 49.9, 0]})


locate_x = -100
locate_y = 24.9
locate_z = 7.5
size_x = box_vertical - 2
size_y = 3 -0.2
size_z_btm = 3
#size_z_top = 3
olist.append( {"OBJ": "CUBE", "name": "B-HOJO-01", "location": (locate_x, locate_y, locate_z), "size": (size_x, size_y, size_z_btm), "rotation": (0,0,0), "material": mlist[12],} )


locate_x = -100
locate_y = 24.9
locate_z = 59
size_x = box_vertical -3
size_y = 8
size_z_btm = 100
olist.append( {"OBJ": "CUBE", "name": "B-HOLE-01", "location": (locate_x, locate_y, locate_z), "size": (size_x, size_y, size_z_btm), "rotation": (0,0,0), "material": mlist[13],} )

alist.append({"function": "booleanFnc", "args": ["B-BOTTOM-01","B-HOLE-01"]})
alist.append({"function": "booleanFnc", "args": ["B-BOTTOM-02","B-HOLE-01"]})
alist.append({"function": "deleteFnc", "args": ["B-HOLE-01"]})


alist.append({"function": "copyFnc", "args": ["A-TOTE-01", "B-TOTE-01",-100,  0, 0]})
alist.append({"function": "copyFnc", "args": ["B-TOTE-01", "B-TOTE-02",   0, 50, 0]})



##--- 2x2 ---##
alist.append({"function": "copyFnc", "args": ["A-BOTTOM-01", "C-BOTTOM-01",-200,  0, 0]})
alist.append({"function": "copyFnc", "args": ["C-BOTTOM-01", "C-BOTTOM-02", 0, 49.9, 0]})
alist.append({"function": "copyFnc", "args": ["C-BOTTOM-01", "C-BOTTOM-03", -49.9, 0, 0]})
alist.append({"function": "copyFnc", "args": ["C-BOTTOM-01", "C-BOTTOM-04", -49.9, 49.9, 0]})

locate_x = -200 - mdf_vertical/4
locate_y = 24.9
locate_z = 59
size_x = mdf_vertical - base_thickness_1
size_y = mdf_vertical - base_thickness_1
size_z_btm = 100
olist.append( {"OBJ": "CUBE", "name": "C-HOLE-01", "location": (locate_x, locate_y, locate_z), "size": (size_x, size_y, size_z_btm), "rotation": (0,0,0), "material": mlist[13],} )

alist.append({"function": "booleanFnc", "args": ["C-BOTTOM-01","C-HOLE-01"]})
alist.append({"function": "booleanFnc", "args": ["C-BOTTOM-02","C-HOLE-01"]})
alist.append({"function": "booleanFnc", "args": ["C-BOTTOM-03","C-HOLE-01"]})
alist.append({"function": "booleanFnc", "args": ["C-BOTTOM-04","C-HOLE-01"]})
alist.append({"function": "deleteFnc", "args": ["C-HOLE-01"]})

alist.append({"function": "copyFnc", "args": ["B-HOJO-01", "C-HOJO-01",-100,  0, 0]})
alist.append({"function": "copyFnc", "args": ["C-HOJO-01", "C-HOJO-02",-49.9, 0, 0]})

alist.append({"function": "copyFnc", "args": ["C-HOJO-01", "C-HOJO-03",-49.9/2, -49.9*0.5, 0]})
alist.append({"function": "rotateFnc", "args": ["C-HOJO-03",0,0,90]})

alist.append({"function": "copyFnc", "args": ["C-HOJO-03", "C-HOJO-04", 0, 49.9, 0]})


alist.append({"function": "copyFnc", "args": ["B-TOTE-01", "C-TOTE-01",-149.9,  0, 0]})
alist.append({"function": "copyFnc", "args": ["C-TOTE-01", "C-TOTE-02",   0, 50, 0]})





##--- BOTTOM GUIDE ---##

locate_x = -mdf_vertical /4
locate_y = -100-mdf_vertical /4
locate_z = 0
size_x = box_vertical
size_y = box_horizontal
size_z_btm = base_depth
size_z_top = box_depth

olist.append( {"OBJ": "CUBE", "name": "Z-HOLE-01", "location": (locate_x, locate_y, locate_z), "size": (size_x, size_y, size_z_btm), "rotation": (0,0,0), "material": mlist[60],} )
alist.append({"function": "scaleMesh", "args": ["Z-HOLE-01", 4, box_btm_rate,box_btm_rate,1]})
alist.append({"function": "scaleMesh", "args": ["Z-HOLE-01", 5, 1.1,1.1,1.1]})
alist.append({"function": "scaleMesh", "args": ["Z-HOLE-01", 4, 1.1,1.1,1.1]})

locate_x = -mdf_vertical /4
locate_y = -100+mdf_vertical /4
locate_z = 0
size_x = box_vertical
size_y = box_horizontal
size_z_btm = base_depth
size_z_top = box_depth

olist.append( {"OBJ": "CUBE", "name": "Z-HOLE-02", "location": (locate_x, locate_y, locate_z), "size": (size_x, size_y, size_z_btm), "rotation": (0,0,0), "material": mlist[61],} )
alist.append({"function": "scaleMesh", "args": ["Z-HOLE-02", 4, box_btm_rate,box_btm_rate,1]})
alist.append({"function": "scaleMesh", "args": ["Z-HOLE-02", 5, 1.1,1.1,1.1]})
alist.append({"function": "scaleMesh", "args": ["Z-HOLE-02", 4, 1.1,1.1,1.1]})


locate_x = -mdf_vertical /4 + mdf_vertical /2
locate_y = -100+mdf_vertical /4
locate_z = 0
size_x = box_vertical
size_y = box_horizontal
size_z_btm = base_depth
size_z_top = box_depth

olist.append( {"OBJ": "CUBE", "name": "Z-HOLE-03", "location": (locate_x, locate_y, locate_z), "size": (size_x, size_y, size_z_btm), "rotation": (0,0,0), "material": mlist[62],} )
alist.append({"function": "scaleMesh", "args": ["Z-HOLE-03", 4, box_btm_rate,box_btm_rate,1]})
alist.append({"function": "scaleMesh", "args": ["Z-HOLE-03", 5, 1.1,1.1,1.1]})
alist.append({"function": "scaleMesh", "args": ["Z-HOLE-03", 4, 1.1,1.1,1.1]})

locate_x = -mdf_vertical /4 + mdf_vertical /2
locate_y = -100-mdf_vertical /4
locate_z = 0
size_x = box_vertical
size_y = box_horizontal
size_z_btm = base_depth
size_z_top = box_depth

olist.append( {"OBJ": "CUBE", "name": "Z-HOLE-04", "location": (locate_x, locate_y, locate_z), "size": (size_x, size_y, size_z_btm), "rotation": (0,0,0), "material": mlist[63],} )
alist.append({"function": "scaleMesh", "args": ["Z-HOLE-04", 4, box_btm_rate,box_btm_rate,1]})
alist.append({"function": "scaleMesh", "args": ["Z-HOLE-04", 5, 1.1,1.1,1.1]})
alist.append({"function": "scaleMesh", "args": ["Z-HOLE-04", 4, 1.1,1.1,1.1]})

locate_x = 0
locate_y = -100
locate_z = 0
size_x = mdf_vertical
size_y = mdf_vertical
size_z_btm = base_depth *0.8

olist.append( {"OBJ": "CUBE", "name": "Z-GUIDE-01", "location": (locate_x, locate_y, locate_z), "size": (size_x, size_y, size_z_btm), "rotation": (0,0,0), "material": mlist[70],} )


alist.append({"function": "copyFnc", "args": ["Z-GUIDE-01", "Z-HOLETOP-01",0,0,7.0]})
alist.append({"function": "scaleMesh", "args": ["Z-HOLETOP-01", 5, 1.1,1.1,1.1]})
alist.append({"function": "scaleMesh", "args": ["Z-HOLETOP-01", 4, 1.1,1.1,1.1]})
alist.append({"function": "booleanFnc", "args": ["Z-GUIDE-01","Z-HOLETOP-01"]})
alist.append({"function": "deleteFnc", "args": ["Z-HOLETOP-01"]})

alist.append({"function": "booleanFnc", "args": ["Z-GUIDE-01","Z-HOLE-01"]})
alist.append({"function": "booleanFnc", "args": ["Z-GUIDE-01","Z-HOLE-02"]})
alist.append({"function": "booleanFnc", "args": ["Z-GUIDE-01","Z-HOLE-03"]})
alist.append({"function": "booleanFnc", "args": ["Z-GUIDE-01","Z-HOLE-04"]})

alist.append({"function": "deleteFnc", "args": ["Z-HOLE-01"]})
alist.append({"function": "deleteFnc", "args": ["Z-HOLE-02"]})
alist.append({"function": "deleteFnc", "args": ["Z-HOLE-03"]})
alist.append({"function": "deleteFnc", "args": ["Z-HOLE-04"]})



#############################################
# 処理開始
## オブジェクト作成
creObjFlow(olist)
## オブジェクト加工
editFlow(alist)
